<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>SudoCell - The Control Panel, Reimagined.</title>
  <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --neon-green: #00ff00;
      --dark-bg: #000000;
      --light-text: #ffffff;
      --muted-text: rgba(255, 255, 255, 0.7);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    html, body {
      height: 100%;
      width: 100%;
      overflow: hidden;
    }

    body {
      background-color: var(--dark-bg);
      font-family: 'JetBrains Mono', monospace;
      color: var(--light-text);
      display: flex;
      justify-content: center;
      align-items: center;
      text-align: center;
    }

    #animation-container {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 0;
    }

    .main-content {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 20px;
      opacity: 0;
      animation: fade-in 1.5s 1s forwards;
      z-index: 1;
    }

    .logo {
      display: flex;
      align-items: center;
      font-size: clamp(2rem, 6vw, 3rem);
      font-weight: 700;
      margin-bottom: 20px;
    }

    .logo-symbol {
      color: var(--neon-green);
      margin-right: 15px;
    }

    .logo-text {
      color: var(--light-text);
    }
    
    p {
        font-size: clamp(1rem, 2.5vw, 1.2rem);
        color: var(--light-text);
        max-width: 500px;
        margin-bottom: 30px;
        line-height: 1.6;
    }

    .signup-form {
      display: flex;
      justify-content: center;
      gap: 10px;
      width: 100%;
      max-width: 500px;
    }

    .email-input {
      font-family: 'JetBrains Mono', monospace;
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.3);
      padding: 15px;
      border-radius: 4px;
      color: var(--light-text);
      flex-grow: 1;
      font-size: 1rem;
      transition: border-color 0.3s, box-shadow 0.3s;
    }
    
    .email-input:focus {
        outline: none;
        border-color: var(--neon-green);
        box-shadow: 0 0 15px rgba(0, 255, 0, 0.5);
    }

    .notify-btn {
      font-family: 'JetBrains Mono', monospace;
      background: var(--neon-green);
      border: none;
      padding: 15px 30px;
      border-radius: 4px;
      color: var(--dark-bg);
      font-weight: 700;
      cursor: pointer;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .notify-btn:hover {
      transform: scale(1.05);
      box-shadow: 0 0 20px var(--neon-green);
    }

    .bottom-links {
        position: fixed;
        bottom: 20px;
        width: 100%;
        display: flex;
        justify-content: space-between;
        padding: 0 30px;
        font-size: 0.9rem;
        color: var(--muted-text);
        z-index: 1;
    }
    
    .status-link {
        color: var(--muted-text);
        text-decoration: none;
        transition: color 0.3s;
    }
    
    .status-link:hover {
        color: var(--neon-green);
    }
    
    @keyframes fade-in {
        to { opacity: 1; }
    }

  </style>
</head>
<body>

  <div id="animation-container"></div>
  
  <div class="main-content">
    <div class="logo">
      <img src="sudocell_logo.png" alt="sudocell logo">
    </div>
    <p>The control panel, reimagined. Powerful for pros, simple for beginners.</p>
<!--     <form class="signup-form">
      <input type="email" class="email-input" placeholder="your-email@example.com" required>
      <button type="submit" class="notify-btn">Get Updates</button>
    </form> -->
  </div>

  <div class="bottom-links">
      <span>Â© 2025 SudoCell</span>
      <a href="status.html" target="_blank" class="status-link">Status</a>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script>
    const container = document.getElementById('animation-container');
    let scene, camera, renderer;
    let mouse = new THREE.Vector2();
    const particles = [];
    const PARTICLE_COUNT = 150;
    const X_BOUNDS = 15;
    const Y_BOUNDS = 10;
    const Z_BOUNDS = 15;

    function init() {
        // Scene
        scene = new THREE.Scene();
        scene.fog = new THREE.Fog(0x000000, 10, 30);

        // Camera
        camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.z = 15;

        // Renderer
        renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setPixelRatio(window.devicePixelRatio);
        container.appendChild(renderer.domElement);

        // Particles
        const chaoticMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff, wireframe: true });
        const orderedMaterial = new THREE.MeshBasicMaterial({ color: 0x00ff00 });

        for (let i = 0; i < PARTICLE_COUNT; i++) {
            const particle = new THREE.Object3D();
            
            // Chaotic part
            const chaoticGeo = new THREE.IcosahedronGeometry(Math.random() * 0.2, 0);
            particle.chaotic = new THREE.Mesh(chaoticGeo, chaoticMaterial);
            particle.chaotic.originalPos = particle.chaotic.geometry.attributes.position.clone();
            
            // Ordered part
            const orderedGeo = new THREE.PlaneGeometry(0.5, 0.01);
            particle.ordered = new THREE.Mesh(orderedGeo, orderedMaterial);
            
            particle.add(particle.chaotic);
            particle.add(particle.ordered);
            
            resetParticle(particle);
            particle.position.x = (Math.random() - 0.5) * X_BOUNDS * 2;
            
            particles.push(particle);
            scene.add(particle);
        }

        // Listeners
        document.addEventListener('mousemove', onMouseMove, false);
        window.addEventListener('resize', onWindowResize, false);
    }
    
    function resetParticle(p) {
        p.position.set(
            -X_BOUNDS - Math.random() * 5,
            (Math.random() - 0.5) * Y_BOUNDS,
            (Math.random() - 0.5) * Z_BOUNDS
        );
        p.speed = Math.random() * 0.02 + 0.01;
    }

    function onMouseMove(event) {
        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
        mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
    }

    function onWindowResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
    }

    function animate() {
        requestAnimationFrame(animate);
        
        particles.forEach(p => {
            p.position.x += p.speed;
            
            const transitionPoint = 0;
            const transitionWidth = 2;
            
            if (p.position.x > transitionPoint - transitionWidth / 2 && p.position.x < transitionPoint + transitionWidth / 2) {
                // In transition zone
                const progress = (p.position.x - (transitionPoint - transitionWidth / 2)) / transitionWidth;
                p.chaotic.visible = true;
                p.ordered.visible = true;
                p.chaotic.material.opacity = 1 - progress;
                p.ordered.material.opacity = progress;
                
                // Glitch effect on chaotic part
                const positions = p.chaotic.geometry.attributes.position;
                const original = p.chaotic.originalPos;
                for(let i = 0; i < positions.count; i++) {
                    const glitch = (Math.random() - 0.5) * (1 - progress) * 0.2;
                    positions.setX(i, original.getX(i) + glitch);
                    positions.setY(i, original.getY(i) + glitch);
                    positions.setZ(i, original.getZ(i) + glitch);
                }
                positions.needsUpdate = true;

            } else if (p.position.x <= transitionPoint - transitionWidth / 2) {
                // In chaotic zone
                p.chaotic.visible = true;
                p.ordered.visible = false;
                p.chaotic.material.opacity = 1;
            } else {
                // In ordered zone
                p.chaotic.visible = false;
                p.ordered.visible = true;
                p.ordered.material.opacity = 1;
            }

            // Reset particle if it goes off screen
            if (p.position.x > X_BOUNDS) {
                resetParticle(p);
            }
        });
        
        // Camera movement
        camera.position.x += (mouse.x * 3 - camera.position.x) * 0.03;
        camera.position.y += (-mouse.y * 3 - camera.position.y) * 0.03;
        camera.lookAt(scene.position);

        renderer.render(scene, camera);
    }

    init();
    animate();
  </script>

</body>
</html>
